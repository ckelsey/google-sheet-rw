(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("google-sheets-rw", [], factory);
	else if(typeof exports === 'object')
		exports["google-sheets-rw"] = factory();
	else
		root["google-sheets-rw"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var loadJSONP = function () {
    var unique = 0;
    return function (url, callback) {
        // INIT
        var name = "_jsonp_" + unique++;
        if (url.match(/\?/)) {
            url += "&callback=" + name;
        } else {
            url += "?callback=" + name;
        }
        // Create script
        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = url;
        // Setup handler
        window[name] = function (data) {
            callback.call(window, data);
            document.getElementsByTagName('head')[0].removeChild(script);
            delete window[name];
        };
        // Load JSON
        document.getElementsByTagName('head')[0].appendChild(script);
    };
}();
var GoogleSheetsRW = /** @class */function () {
    function GoogleSheetsRW() {
        this.worksheets = {};
    }
    GoogleSheetsRW.prototype.parseWorksheet = function (xml) {
        return new Promise(function (resolve, reject) {
            var parser = new DOMParser();
            var entries = document.querySelectorAll("asdfg");
            var results;
            var lastUpdated = new Date();
            var title = "";
            try {
                var xmlDoc = parser.parseFromString(xml, "text/xml");
                entries = xmlDoc.querySelectorAll('entry');
                var titleElement = xmlDoc.querySelector('title');
                var lastUpdatedElement = xmlDoc.querySelector('updated');
                if (titleElement) {
                    title = titleElement.textContent || "";
                }
                if (lastUpdatedElement) {
                    var dateString = lastUpdatedElement.textContent || new Date();
                    lastUpdated = new Date(dateString);
                }
            } catch (e) {
                reject(e);
            }
            results = {
                title: title,
                lastUpdated: lastUpdated,
                entries: {}
            };
            for (var i = 0; i < entries.length; i = i + 1) {
                var temp = {
                    google_url: "",
                    id: ""
                };
                var children = entries[i].childNodes;
                for (var c = 0; c < children.length; c = c + 1) {
                    var child = children[c];
                    if (child) {
                        if (child.tagName.toLowerCase().indexOf('gsx:') > -1) {
                            temp[child.tagName.split('gsx:')[1]] = children[c].textContent;
                        } else if (child.tagName.toLowerCase() === 'id') {
                            temp.google_url = child.textContent || "";
                            temp.id = temp.google_url.split('/')[temp.google_url.split('/').length - 1];
                        }
                    }
                }
                if (Object.keys(temp).length) {
                    results.entries[i] = temp;
                }
            }
            return resolve(results);
        });
    };
    GoogleSheetsRW.prototype.parseFeed = function (feed) {
        return new Promise(function (resolve, reject) {
            var parser = new DOMParser();
            var entries = document.querySelectorAll("asdfg");
            var results = {};
            try {
                var xmlDoc = parser.parseFromString(feed, "text/xml");
                entries = xmlDoc.querySelectorAll('entry');
            } catch (e) {
                reject(e);
            }
            if (!entries || !entries.length) {
                return reject("invalid xml in worksheet");
            }
            for (var i = 0; i < entries.length; i = i + 1) {
                var temp = {
                    id: "",
                    title: ""
                };
                var children = entries[i].childNodes;
                for (var c = 0; c < children.length; c = c + 1) {
                    if (children[c]) {
                        var child = children[c];
                        if (child.tagName.toLowerCase() === 'id') {
                            var text = child.textContent;
                            if (text && text.split) {
                                text = text.split('/')[text.split('/').length - 1];
                                temp.id = text;
                            }
                        }
                        if (child.tagName.toLowerCase() === 'title') {
                            temp.title = child.textContent || "";
                        }
                    }
                }
                if (temp.id && temp.id !== "") {
                    results[temp.id] = temp;
                }
            }
            return resolve(results);
        });
    };
    GoogleSheetsRW.prototype.init = function (config) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (!config.sheet) {
                return reject("No sheet id in config");
            }
            if (!config.script) {
                return reject("No script id in config");
            }
            if (!config.domain) {
                return reject("No domain in config");
            }
            var url = 'https://spreadsheets.google.com/feeds/worksheets/' + config.sheet + '/public/values';
            return loadJSONP(url, function (res) {
                if (!res) {
                    return reject("invalid worksheet");
                }
                _this.parseFeed(res).then(function (_feedData) {
                    var feedData = {
                        sheetId: config.sheet,
                        script: config.script,
                        domain: config.domain,
                        sheets: JSON.parse(JSON.stringify(_feedData))
                    };
                    _this.worksheets[config.sheet] = feedData;
                    resolve(feedData);
                }).catch(function (error) {
                    console.log(error);
                });
            });
        });
    };
    GoogleSheetsRW.prototype.readSheet = function (worksheet, sheet) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var url = 'https://spreadsheets.google.com/feeds/list/' + worksheet.sheetId + '/' + sheet.id + '/public/values';
            return loadJSONP(url, function (res) {
                if (!res) {
                    return reject("invalid worksheet");
                }
                _this.parseWorksheet(res).then(function (worksheetData) {
                    _this.worksheets[worksheet.sheetId].sheets[sheet.id].data = worksheetData;
                    resolve(worksheetData);
                }).catch(function (error) {
                    reject(error);
                });
            });
        });
    };
    GoogleSheetsRW.prototype.createEntries = function (dataToSend, worksheet, sheet) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (!Array.isArray(dataToSend)) {
                dataToSend = [dataToSend];
            }
            for (var e = 0; e < dataToSend.length; e++) {
                var hex = '';
                for (var i = 0; i < JSON.stringify(dataToSend[e]).length; i++) {
                    hex += '' + JSON.stringify(dataToSend[e]).charCodeAt(i).toString(16);
                }
                for (var p in dataToSend[e]) {
                    if (!!dataToSend[e][p] && (dataToSend[e][p].constructor === Array || dataToSend[e][p].constructor === Object)) {
                        try {
                            dataToSend[e][p] = JSON.stringify(dataToSend[e][p]);
                        } catch (error) {}
                    }
                }
                dataToSend[e].confirmationID = new Date().getTime() + '_' + hex;
                dataToSend[e].created = new Date();
            }
            var postUrl = "https://script.google.com/a/macros/" + worksheet.domain + "/s/" + worksheet.script + "/dev?sheetId=" + worksheet.sheetId + "&sheet=" + encodeURIComponent(sheet.title) + "&data=" + encodeURIComponent(JSON.stringify(dataToSend));
            loadJSONP(postUrl, function (res) {
                console.log(res);
                return _this.readSheet(worksheet, sheet).then(function (res) {
                    console.log(res);
                    // let addedRows = []
                    // for (let r in res.entries) {
                    //     dataToSend.forEach(function (sentData, index) {
                    //         if (res.entries[r].confirmationid === sentData.confirmationID) {
                    //             addedRows.push({ index: parseInt(r) + 2, row: res.entries[r] })
                    //         }
                    //     })
                    // }
                    // res.addedRows = addedRows
                    // if (addedRows.length !== dataToSend.length) {
                    //     return reject(res);
                    // }
                    return resolve(res);
                }).catch(function (res) {
                    return reject(res);
                });
            });
        });
    };
    GoogleSheetsRW.prototype.updateEntry = function () {};
    return GoogleSheetsRW;
}();
window.GoogleSheetsRW = new GoogleSheetsRW();
/* harmony default export */ __webpack_exports__["default"] = (window.GoogleSheetsRW);

/***/ })
/******/ ]);
});